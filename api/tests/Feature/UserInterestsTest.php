<?php

namespace Tests\Features;

use App\Http\Controllers\UserInterestController;
use App\Models\Activity;
use App\Models\Attitude;
use App\Models\SkillLevel;
use Tests\TestCase;

use App\Models\User;
use App\Http\Controllers\UserController;

class UserInterestsTest extends TestCase
{


    private const USER_INTEREST_CREATE_ENDPOINT = 'api/user/interest';


    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        User::query()->delete();


        Activity::query()->delete();
        Attitude::query()->delete();
        SkillLevel::query()->delete();

        $this->createActivities();
        $this->createAttitudes();
        $this->createSkillLevels();
    }


    private function createActivities(): void
    {
        foreach(Activity::PRESET_VALUES as $value)
        {
            Activity::create(['name' => $value]);
        }
    }

    private function createAttitudes(): void
    {
        foreach(Attitude::PRESET_VALUES as $value)
        {
            Attitude::create(['name' => $value]);
        }
    }

    private function createSkillLevels(): void
    {
        foreach(SkillLevel::PRESET_VALUES as $value)
        {
            SkillLevel::create(['name' => $value]);
        }
    }


    public function test_createSingleUserInterest(): void
    {
        $postData =
            [
                'interests' =>
                    [
                        [
                            'activity' => 'Hiking',
                            'attitude' => 'Interested',
                            'skillLevel' => 'Skilled',
                        ]
                    ]
            ];

        $response = $this->post(self::USER_INTEREST_CREATE_ENDPOINT, $postData);

        $response->assertStatus(200);
        $response->assertExactJson([
            'success' => UserInterestController::INTEREST_ADDED,
        ]);

    }

    public function test_createMultipleUserInterests(): void
    {
        $postData =
            [
                'interests' =>
                [
                    [
                        'activity' => 'Hiking',
                        'attitude' => 'Frequently Participates',
                        'skillLevel' => 'Skilled'
                    ],
                    [
                        'activity' => 'Backpacking',
                        'attitude' => 'Currently Learning',
                        'skillLevel' => 'Novice'
                    ],
                    [
                        'activity' => 'Camping',
                        'attitude' => 'Interested',
                        'skillLevel' => 'Moderate'
                    ],
                ]
            ];

        $response = $this->post(self::USER_INTEREST_CREATE_ENDPOINT, $postData);

        $response->assertStatus(200);
        $response->assertExactJson([
            'success' => UserInterestController::INTEREST_ADDED,
        ]);
    }

    public function test_noActivityError(): void
    {
        $postData = [
            'interests' => [
                [
                    'attitude' => 'Currently Learning',
                    'skillLevel' => 'Novice'
                ]
            ]
        ];

        $response = $this->post(self::USER_INTEREST_CREATE_ENDPOINT, $postData);

        $response->assertStatus(200);
        $response->assertExactJson([
            'error' => UserInterestController::NO_ACTIVITY_ERR_MSG,
        ]);
    }

    public function test_noAttitudeError(): void
    {
        $postData = [
            'interests' => [
                [
                    'activity' => 'Hiking',
                    'skillLevel' => 'Novice'
                ]
            ]
        ];

        $response = $this->post(self::USER_INTEREST_CREATE_ENDPOINT, $postData);

        $response->assertStatus(200);
        $response->assertExactJson([
            'error' => UserInterestController::NO_ATTITUDE_ERR_MSG,
        ]);
    }

    public function test_noSkillLevelError(): void
    {
        $postData = [
            'interests' => [
                [
                    'activity' => 'Hiking',
                    'attitude' => 'Currently Learning',
                ]
            ]
        ];

        $response = $this->post(self::USER_INTEREST_CREATE_ENDPOINT, $postData);

        $response->assertStatus(200);
        $response->assertExactJson([
            'error' => UserInterestController::NO_SKILL_LEVEL_ERR_MSG,
        ]);
    }

    public function test_invalidActivityError(): void
    {
        $postData = [
            'activity' => 'Invalid Activity',
            'attitude' => 'Interested',
            'skillLevel' => 'Novice'
        ];

        $response = $this->post(self::USER_INTEREST_CREATE_ENDPOINT, $postData);

        $response->assertStatus(200);
        $response->assertExactJson([
            'error' => UserInterestController::INVALID_ACTIVITY_ERR_MSG,
        ]);
    }

    public function test_invalidAttitudeError(): void
    {
        $postData = [
            'activity' => 'Hiking',
            'attitude' => 'Invalid Attitude',
            'skillLevel' => 'Novice'
        ];

        $response = $this->post(self::USER_INTEREST_CREATE_ENDPOINT, $postData);

        $response->assertStatus(200);
        $response->assertExactJson([
            'error' => UserInterestController::INVALID_ATTITUDE_ERR_MSG,
        ]);
    }

    public function test_invalidSkillLevelError(): void
    {
        $postData = [
            'activity' => 'Hiking',
            'attitude' => 'Interested',
            'skillLevel' => 'Invalid Skill Level',
        ];


        $response = $this->post(self::USER_INTEREST_CREATE_ENDPOINT, $postData);

        $response->assertStatus(200);
        $response->assertExactJson([
            'error' => UserInterestController::INVALID_SKILL_LEVEL_ERR_MSG,
        ]);
    }

}
