<?php

namespace Tests\Features;

use App\Http\Controllers\UserInterestController;
use App\Models\Activity;
use App\Models\Attitude;
use App\Models\SkillLevel;
use App\Models\UserInterest;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

use App\Models\User;

class UserInterestsGetTest extends TestCase
{


    private const USER_INTEREST_GET_ENDPOINT = 'api/user/interest';
    private const EMAIL_1 = "johnfoo@bar.com";
    private const EMAIL_2 = "janebar@baz.com";
    private const PASSWORD = 'somesillypassword';


    private const INTERESTS = [
        self::EMAIL_1 => [
            [
                'activity' => Activity::PRESET_VALUES[0],
                'attitude' => Attitude::PRESET_VALUES[0],
                'skillLevel' => SkillLevel::PRESET_VALUES[0],
            ],
            [
                'activity' => Activity::PRESET_VALUES[1],
                'attitude' => Attitude::PRESET_VALUES[1],
                'skillLevel' => SkillLevel::PRESET_VALUES[1],
            ],
            [
                'activity' => Activity::PRESET_VALUES[2],
                'attitude' => Attitude::PRESET_VALUES[2],
                'skillLevel' => SkillLevel::PRESET_VALUES[2],
            ],
        ],
        self::EMAIL_2 => [
            [
                'activity' => Activity::PRESET_VALUES[0],
                'attitude' => Attitude::PRESET_VALUES[0],
                'skillLevel' => SkillLevel::PRESET_VALUES[0],
            ],
            [
                'activity' => Activity::PRESET_VALUES[1],
                'attitude' => Attitude::PRESET_VALUES[1],
                'skillLevel' => SkillLevel::PRESET_VALUES[1],
            ],
            [
                'activity' => Activity::PRESET_VALUES[4],
                'attitude' => Attitude::PRESET_VALUES[4],
                'skillLevel' => SkillLevel::PRESET_VALUES[4],
            ],
        ]
    ];

    private function login($email)
    {
        $postData = [
          'email' => $email,
          'password' => self::PASSWORD,
        ];

        // Session is stored in the class ($this), so we don't need to do weird header stuff.
        $this->post('api/login', $postData);
    }


    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        User::query()->delete();
        User::create([
            'name' => 'John Foo',
            'email' => self::EMAIL_1,
            'password' => Hash::make(self::PASSWORD),
        ]);

        User::create([
            'name' => 'Jane Bar',
            'email' => self::EMAIL_2,
            'password' => Hash::make(self::PASSWORD),
        ]);



        Activity::query()->delete();
        Attitude::query()->delete();
        SkillLevel::query()->delete();

        $this->createActivities();
        $this->createAttitudes();
        $this->createSkillLevels();


        $this->createUserInterests();
    }


    private function createActivities(): void
    {
        foreach(Activity::PRESET_VALUES as $value)
        {
            Activity::create(['name' => $value]);
        }
    }

    private function createAttitudes(): void
    {
        foreach(Attitude::PRESET_VALUES as $value)
        {
            Attitude::create(['name' => $value]);
        }
    }

    private function createSkillLevels(): void
    {
        foreach(SkillLevel::PRESET_VALUES as $value)
        {
            SkillLevel::create(['name' => $value]);
        }
    }

    private function createUserInterests(): void
    {

        foreach(self::INTERESTS as $email => $userInterests)
        {
            $user = User::where('email', $email)->first();

            foreach($userInterests as $interests)
            {
                $activity = Activity::where('name', $interests['activity'])->first();
                $attitude = Attitude::where('name', $interests['attitude'])->first();
                $skillLevel = SkillLevel::where('name', $interests['skillLevel'])->first();

                $interest = UserInterest::create(['name' => $user->email]);
                $interest->activity()->save($activity);
                $interest->attitude()->save($attitude);
                $interest->skillLevel()->save($skillLevel);
                $user->interests()->save($interest);
            }

        }

    }


    public function test_getCurrentUserInterests(): void
    {
        $this->login(self::EMAIL_1);

        $response = $this->get(self::USER_INTEREST_GET_ENDPOINT);

        $response->assertStatus(200);

        $response->assertExactJson([
            'success' => self::INTERESTS[self::EMAIL_1]
        ]);
    }

    public function test_getOtherUserInterests(): void
    {
        $this->login(self::EMAIL_1);

        $response = $this->get(self::USER_INTEREST_GET_ENDPOINT . '/' . self::EMAIL_2);
        $response->assertStatus(200);
        $response->assertExactJson([
            'success' => self::INTERESTS[self::EMAIL_2]
        ]);
    }


    public function test_getNoUserInterests(): void
    {

        $this->login(self::EMAIL_1);

        $response = $this->get(self::USER_INTEREST_GET_ENDPOINT . '/' . 'thisUserDoesNotExist');
        $response->assertStatus(200);
        $response->assertExactJson([
            'error' => UserInterestController::INVALID_USERNAME_ERR_MSG
        ]);

    }

}
